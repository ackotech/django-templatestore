# Generated by Django 3.0.7 on 2021-06-01 07:19

from django.db import migrations
import requests
from templatestore import app_settings as ts_settings


API_URL = ts_settings.USER_SERVICE_URL


def get_email_from_user_id(user_id, context):
    try:
        res = requests.get(API_URL+'get/?id=' + str(user_id))
        body = res.json()
        print("body recieved", body)
        email = 'email'
        if email not in body:
            print("in context %d, for userid - %d, there is no email" % (
            context, user_id))
            pass
        else:
            print("in context %d, for userid - %d, email is %s" % (
            context, user_id, body[email]))
            return body[email]
    except Exception as e:
        print(e)
    
    return ""


def main_script(apps, schema_editor):
    from templatestore.models import Template, TemplateVersion
    if API_URL is None:
        print("API URL is empty!!")
        raise Exception("API URL is empty")
    user_id_mail_map = {}
    all_templates = Template.objects.all()
    print("all templates", all_templates)
    for template in all_templates:
        user_id = template.created_by
        print("template ", template.name, user_id)
        if not user_id or user_id is '':
            continue
        if user_id not in user_id_mail_map:
            email = get_email_from_user_id(user_id, template.id)
            user_id_mail_map[user_id] = email
        else:
            email = user_id_mail_map[user_id]
        template.user_email = email
        template.save()
    
    print("all templates done")
    
    all_template_versions = TemplateVersion.objects.all()
    for template_version in all_template_versions:
        user_id = template_version.created_by
        print("template_version ", template_version.version, user_id)
        if not user_id or user_id is '':
            continue
        if user_id not in user_id_mail_map:
            email = get_email_from_user_id(user_id,
                                           template_version.id)
            user_id_mail_map[user_id] = email
        else:
            email = user_id_mail_map[user_id]
        template_version.user_email = email
        template_version.save()
    
    print(user_id_mail_map)


class Migration(migrations.Migration):

    dependencies = [
        ('templatestore', '0007_templateversion_user_email'),
    ]

    operations = [
        migrations.RunPython(main_script),
    ]
